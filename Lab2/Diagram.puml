@startuml
class Person {
    - id: Int
    - lastName: String
    - firstName: String
    - middleName: String?
    - git: String?
    - phone: String?
    - telegram: String?
    - email: String?

    + getFullName(): String
    + getContactInfo(): String
    + toString(): String

    .. Companion Object ..
    + isValidPhone(phone: String): Boolean
    + isValidTelegram(telegram: String): Boolean
    + isValidEmail(email: String): Boolean
    + isValidGit(git: String): Boolean
}

class Student {
    - lastName: String
    - firstName: String
    - middleName: String
    - id: Int?
    - phone: String?
    - telegram: String?
    - email: String?
    - git: String?

    + getInfo(): String
    + toString(): String

    .. Companion Object Validators ..
    + fullNameValid(fullName: String?): Boolean
    + phoneValid(phone: String?): Boolean
    + telegramValid(telegram: String?): Boolean
    + emailValid(email: String?): Boolean
    + gitValid(git: String?): Boolean
}

class StudentShort {
    - id: Int
    - fio: String
    - git: String?
    - contact: String

    + toString(): String
}

class DataTable<T> {
    - data: Array<Array<T>>

    + getElement(row: Int, col: Int): T
    + getRowCount(): Int
    + getColumnCount(): Int
    + toString(): String
}

abstract class DataList<T> {
    - elements: Array<T>
    - selectedIndices: MutableSet<Int>

    + select(number: Int): void
    + getSelectedIds(): Int[]
    + getNames(): Array<String> <<abstract>>
    + getData(): DataTable<T> <<abstract>>
    + fetchData(): Array<Array<String?>> <<abstract>>
    + formatData(data: Array<Array<String?>>): Array<Array<String>> <<abstract>>
}

class DataListStudentShort {
    + getNames(): Array<String>
    + fetchData(): Array<Array<String?>>
    + formatData(data: Array<Array<String?>>): Array<Array<String>>
    + getData(): DataTable<String>
    + printNames(names: Array<String>): void
}

Person <|-- Student
Person <|-- StudentShort
Student --> StudentShort : converts to
DataList <|-- DataListStudentShort
